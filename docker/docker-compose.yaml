services:
  postgres:
    image: postgres:17
    hostname: postgres
    networks:
      - app-tier
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: &kafka-image bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    networks:
      - app-tier
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: ${KAFKA_KRAFT_CLUSTER_ID}
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9090 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s

  kafka-init:
    image: *kafka-image
    container_name: kafka-init
    networks:
      - app-tier
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        echo 'Waiting for Kafka to be ready...'
        kafka-topics.sh --bootstrap-server kafka:9090 --list
        echo 'Creating topic: tinkoff-candle'
        kafka-topics.sh --create --topic tinkoff-candle --bootstrap-server kafka:9090 --partitions 1 --replication-factor 1 --if-not-exists
        echo 'Topic tinkoff-candle created successfully'
    restart: "no"

  api-connection-service:
    image: api-connection-service
    env_file: .env
    container_name: api-connection-service
    hostname: api-connection-service
    networks:
      - app-tier
    build:
      context: ../.
      dockerfile: api-connection-service/Dockerfile
    pull_policy: build
    environment:
      API_TOKEN: ${API_TOKEN}
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
    ports:
      - "3001:9090"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  core-service:
    env_file: .env
    image: core-service
    container_name: core-service
    hostname: core-service
    networks:
      - app-tier
    build:
      context: ../.
      dockerfile: core-service/Dockerfile
    pull_policy: build
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
    ports:
      - "3002:9090"
    restart: unless-stopped
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  liquibase:
    container_name: liquibase
    image: db-migration
    restart: on-failure
    env_file: .env
    networks:
      - app-tier
    pull_policy: build
    build:
      dockerfile: ../migrations/Dockerfile
      context: ../migrations
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/postgres
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../migrations:/liquibase/changelog/

  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    networks:
      - app-tier
    restart: unless-stopped

volumes:
  postgres:
  kafka:
  prometheus:
    name: prometheus
    driver: local

networks:
  app-tier:
    name: app-tier
    driver: bridge
